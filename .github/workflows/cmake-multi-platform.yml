name: CMake on Multiple Platforms

on:
  push:
    branches: ['*']
  pull_request:
    branches: ['*']

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release]
        compiler:
          - { c_compiler: gcc-10, cpp_compiler: g++-10 }
          - { c_compiler: gcc-11, cpp_compiler: g++-11 }
          - { c_compiler: gcc-12, cpp_compiler: g++-12 }
          - { c_compiler: gcc-13, cpp_compiler: g++-13 }
          - { c_compiler: gcc-14, cpp_compiler: g++-14 }
          - { c_compiler: clang, cpp_compiler: clang++ }
        cmake_option:
          - -DPARALLEL_RUN=OFF -DCOLLECT_SCHEDULE_GRAPHS=ON
          - -DPARALLEL_RUN=ON
        include:
          - os: windows-latest
            compiler: { c_compiler: cl, cpp_compiler: cl }
            cmake_option: -DUSE_TBB_MALLOC=OFF -DMSVC=ON
            build_type: Release

        exclude:
          - os: windows-latest
            compiler: { c_compiler: gcc-10, cpp_compiler: g++-10 }
          - os: windows-latest
            compiler: { c_compiler: gcc-11, cpp_compiler: g++-11 }
          - os: windows-latest
            compiler: { c_compiler: gcc-12, cpp_compiler: g++-12 }
          - os: windows-latest
            compiler: { c_compiler: gcc, cpp_compiler: g++ }
          - os: windows-latest
            compiler: { c_compiler: clang, cpp_compiler: clang++ }
          - os: windows-latest
            cmake_option: -DPARALLEL_RUN=ON
          - os: macos-latest
            compiler: { c_compiler: gcc-10, cpp_compiler: g++-10 }


    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Pull submodules recursively
      run: git submodule update --init --recursive

    - name: Install dependencies on Linux
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        sudo apt-get -y update
        sudo apt-get -y install libtbb-dev

    - name: Install GCC 10 on Linux
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.compiler.c_compiler == 'gcc-10' }}
      run: sudo apt install g++-10 gcc-10

    - name: Install GCC 11 on Linux
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.compiler.c_compiler == 'gcc-11' }}
      run: sudo apt install g++-11 gcc-11

    - name: Install dependencies on macOS
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        brew update
        brew install tbb
        if [[ "${{ matrix.compiler.c_compiler }}" == "gcc-10" ]]; then
          brew install gcc@10
        elif [[ "${{ matrix.compiler.c_compiler }}" == "gcc-11" ]]; then
          brew install gcc@11
        elif [[ "${{ matrix.compiler.c_compiler }}" == "gcc-12" ]]; then
          brew install gcc@12
        elif [[ "${{ matrix.compiler.c_compiler }}" == "gcc" ]]; then
          brew install gcc
        fi

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.compiler.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.compiler.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        ${{ matrix.cmake_option }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Run an example (POSIX)
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
      run: ./nptest ../examples/fig1c.csv -m 4 --header
      shell: bash

    - name: Test (POSIX)
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
      run: ./runtests
      shell: bash

    - name: Run an example (Windows)
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      if: ${{ matrix.os == 'windows-latest' }}
      run: .\\Release\\nptest.exe ..\\examples\\fig1c.csv -m 4 --header
      shell: bash

    - name: Test (Windows)
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      if: ${{ matrix.os == 'windows-latest' }}
      run: .\\Release\\runtests.exe
      shell: bash
